// Поведенческий Verilog объясняет взаимоотношения между вводами и выводами
// К примеру: assign y = a & b;
// Структурный Verilog описывает структуры сформированные более простыми компонентами
// К примеру: and g1(y, a, b);
// Разделы 4.1-4.3 в книге (начиная со стр. 171) описывают эти 
// различия в деталях

// Этот модуль структурный или поведенческий?
module fulladder(input  logic a, b, cin,
		     output logic sum, cout);
	
	// Объявить 5 внутренних логических сигналов или локальных переменных, 
	// которые могут использоваться только в пределах этого модуля
	logic ns, n1, n2, n3, n4;
	
	// Следующие логические вентили являются частью спецификации SystemVerilog
	// (встроенные примитивы).
	// Первый сигнал (к примеру, ns) является выводом. Остальные(e.g., a, b) являются 
	// вводами.

	// sum logic
	xor x1(ns, a, b);		// ns = a XOR b
	xor x2(sum, ns, cin);	// sum = ns XOR cin
	
	// carry logic
	and a1(n1, a, b);		// n1 = a & b
	and a2(n2, a, cin);		// n2 = a & cin
	and a3(n3, b, cin);		// n3 = b & cin
	or o1(n4, n1, n2);		// n4 = n1 | n2
	or o2(cout, n3, n4);	// cout = n3 | n4

// Этот пример является структурным Verilog'ом, поскольку модуль описан 
// структурно, используя более фундаментальные блоки построения 
endmodule________________________________________
//// ?????? testbench ????????? ?????? ??????, ???????????? ??????????(device under test).
// ?? ?????? ??????? ??????? ?? ?? ? ?????????, ????????????? ?? ???????? ??????? ????????? ?????????.
// ???????????? ????????????? ??????? ?????? ? ???????? ???????, ?????????? testvectors (???????? ???????).
module testbench();
	logic 		 clk, reset;
	// 'clk' & 'reset' - ??? ?????? ????? ??? ??????????? ????? ? ??????, ?? ??? ?? ???????????????/
	logic 		 a, b, cin, s, cout, sexpected, coutexpected;
	// ??? ?????????? ??? ??????? ???????????? 3 ?????, 2 ??????, 2 ????????? ??????.
	logic [31:0] vectornum, errors;
	// '[31:0]' ??????????, ??? ????????? ???????,
	// "vectornum" ? "errors" ? ???? ?????? ???????? 32-??????? ?? ????? (?? 0 ?? 31 ???) ? ??????? ?? ???????? ? ???????? 
	// (?????????? ???????? ??? ?? ???????? ?????? ??? [msb:lsb]). 
	// vectornum ?????????? ?????????? ??????????? ???????? ????????.
	// errors ?????????? ?????????? ????????? ??????.
	// ?????? ???? ?????? 'int' ?????????? 4 ?????, ????? ??????? 32 ????. 
	logic [4:0]  testvectors[10000:0];
	// ?????? ?? ?????? ?????? 5-?????? ???????? ??????, ????????? testvectors ? ???????? ?? 0 ?? 10000 
	//(testvectors[0],testvectors[1],testvectors[2],...,testvectors[10000]).
	// ??????? ???????, testvectors ???????? 10001 ?????????, ?????? ?? ??????? - ??? 5-?????? ???????? ?????. 
	// ?????????? ????? ???????????? ????? ????? ?????????? ??????? ? ???????? ?????
	// (? ???????. ??? 1-bit ????? + ??? 1-?????? ?????? = ???? 5-?????? testvector). 
	// ? ???? ???????, ?? ????? ???????????? ?????? 8 ???????? ???????? (???????? ???? .tv),
	// ?????? ?? ?????? ????????? ? ???, ????? ?????????? ?????? ??? ????????????? ???????? ??????????, 
	// ??? ??? ?? ?????? ???????? ???????? ???????? ??????? ?????.

//// ???????????? ???????????? ?????????? (??/DUT).
// ?????: a, b, cin. ??????: s, cout.
fulladder dut(a, b, cin, s, cout);

//// ???????? ????????? ?????????????.
always
// ???????? 'always' ?????????? ??????????? ? ????? ????????? ???????????????.
	begin
      	//// ??????? ???? ? ???????? 10 ?????? ???????. 
		// ????????? ?????? clk HIGH(1) ?? 5 ??????, LOW(0) ?? 5 ?????? 
		clk=1; #5; 
		clk=0; #5;
	end

//// ?????? ?????. 
initial
// 'initial' ???????????? ?????? ? ????????? (??????????????? ????????????).
	begin
		//// ????????? ???????, ?????????? ??? ???? ? ??????? (? ???????? ???????) ? .tv-?????.
		$readmemb("fulladder.tv", testvectors);
		// $readmemb ?????? ???????? ??????, $readmemh ?????? ????????????????? ??????.

		// ???????????????? ?????????? ??????????? ???????? ? ?????????? ???????????? ??????.
		vectornum=0; 
		errors=0;
		// ??? ??????? ???????????????? ?????? ? ??????.

		//// ????? ???????? ?? 22 ??????? ??????? (2,2 ?????), ??????? ?????? reset ?????? ????? ?????? ?????????????.
		reset=1; #22;
     	reset=0;
		// ?????? ?????????? HIGH(1) ?? 22 ??????? ???????, ????? ???????? LOW(0) ?? ????? ?????.
	end

//// ?????????? ???????? ??????? ?? ???????????? ?????? ??????? clk.
always @(posedge clk)
	//  ???????? ????????, ??? ???? ???????? 'always' ????? ?????? ????????????????,
	// ??????? ????????????, ????? ??? ??????????? ? ????? ?????? ???????????. 
	// '@(posedge clk)' ???????? ?? ?????????????? ??? ???????????? ?????? ????????? c??????. 
	begin
		//// ?????????? ???????? ??????? ????? 1 ??????? ??????? ????? ???????????? ?????? ????????? ???????,
		// ????? ???????? ????????? ?????? ???????????? ? ???????? ????????.
		#1;
		//// ???????? ??????? 5-?????? ???????? ?????? ?? 3 ????? ? 2 ????????? ??????.
 		{a,b,cin, coutexpected,sexpected} = testvectors[vectornum];
	end

//// ???????? ??????????? ?? ?????????? ?????? ??????? clk.
always @(negedge clk)
// ??? ?????? ???? ????????? ????????? ????????? ????????? ???????????
// ? ????? ?? ?????????????? ?????? ????????? ???????.
	//// ?????? ?? ?????? ?? ????? ??????. ? ????????? ?????? ?????????? ?????????.
	if (~reset) begin
			//// ??????? ??????, ???????? ???? ?????? ?? ?? ????????? ? ??????????.
			if (s !== sexpected || cout !== coutexpected) begin
			// ???? ?????????? ??????, ??????? ??? 3 ?????, 2 ??????, 2 ????????? ??????.
				$display("Error: inputs = %b", {a, b, cin});
				// '$display' ??????? ????? ??????????? ?????? ??????? ? ???? ??????????.
				// %b, %d ? %h ????????? ???????? ? ????????, ?????????? ? ????????????????? ????????.
				// {a, b, cin} ??????? ??????, ?????????? ??? ???????.
				$display(" outputs = %b %b (%b %b expected)", s, cout, sexpected, coutexpected);
				//// ??????????? ?????????? errors.
				errors = errors + 1;
			end
			//// ??????????? ?????????? ????????.
			vectornum = vectornum + 1;
			//// ????? ?????? ????? ?????????? ?????? 'x', ??? ????????, ??? ??? ???????,
            // ??????? ???? ????????????? ?????????, ???? ??????????, ? ????? ??????? ???? ????????.
			if (testvectors[vectornum] === 5'bx) begin
			// '==='&'!==' ????? ?????????? ??????????? ? ????????? ???????? (X&Z),
			// ? ??????? ??. '=='&'!=', ??????? ????? ?????????? ?????? 0 ? 1.
			// 5'bx - 5-?????? ???????? ????? x ??? xxxxx.
			// ???? ??????? ???????? ?????? ????? xxxxx, ???????? ?????????? ???????? ? ???????????? ??????.
				$display("%d tests completed with %d errors", vectornum, errors);
				// ????? ?????????? ?????????.
			$stop;
		end
	end

// ?????????, ????? ????? ???????? ?? ?????????????? ?????? ????????? ???????
// ? ?????? ??????????? ?? ???????????? ????????? ??????? ?? ????????????? ???????? ???????. 
// ?? ??????? ?????????? ????????????. 
// ??????? ??????????? ?? ??? ???, ???? ? ???????? testvectors ?? ????????? ?????????? ???????? ????????. 
// ? ????? ????????????? ?????? ??????? ????? ?????????? ??????????? ???????? ???????? ? ????? ?????????? ???????????? ??????. 
endmodule________________________________________
//// ?????? testbench ????????? ?????? ??????, ???????????? ??????????(device under test).
// ?? ?????? ??????? ??????? ?? ?? ? ?????????, ????????????? ?? ???????? ??????? ????????? ?????????.
// ???????????? ????????????? ??????? ?????? ? ???????? ???????, ?????????? testvectors (???????? ???????).
module testbench();
	logic 		 clk, reset;
	// 'clk' & 'reset' - ??? ?????? ????? ??? ??????????? ????? ? ??????, ?? ??? ?? ???????????????/
	logic 		 a, b, cin, s, cout, sexpected, coutexpected;
	// ??? ?????????? ??? ??????? ???????????? 3 ?????, 2 ??????, 2 ????????? ??????.
	logic [31:0] vectornum, errors;
	// '[31:0]' ??????????, ??? ????????? ???????,
	// "vectornum" ? "errors" ? ???? ?????? ???????? 32-??????? ?? ????? (?? 0 ?? 31 ???) ? ??????? ?? ???????? ? ???????? 
	// (?????????? ???????? ??? ?? ???????? ?????? ??? [msb:lsb]). 
	// vectornum ?????????? ?????????? ??????????? ???????? ????????.
	// errors ?????????? ?????????? ????????? ??????.
	// ?????? ???? ?????? 'int' ?????????? 4 ?????, ????? ??????? 32 ????. 
	logic [4:0]  testvectors[10000:0];
	// ?????? ?? ?????? ?????? 5-?????? ???????? ??????, ????????? testvectors ? ???????? ?? 0 ?? 10000 
	//(testvectors[0],testvectors[1],testvectors[2],...,testvectors[10000]).
	// ??????? ???????, testvectors ???????? 10001 ?????????, ?????? ?? ??????? - ??? 5-?????? ???????? ?????. 
	// ?????????? ????? ???????????? ????? ????? ?????????? ??????? ? ???????? ?????
	// (? ???????. ??? 1-bit ????? + ??? 1-?????? ?????? = ???? 5-?????? testvector). 
	// ? ???? ???????, ?? ????? ???????????? ?????? 8 ???????? ???????? (???????? ???? .tv),
	// ?????? ?? ?????? ????????? ? ???, ????? ?????????? ?????? ??? ????????????? ???????? ??????????, 
	// ??? ??? ?? ?????? ???????? ???????? ???????? ??????? ?????.

//// ???????????? ???????????? ?????????? (??/DUT).
// ?????: a, b, cin. ??????: s, cout.
fulladder dut(a, b, cin, s, cout);

//// ???????? ????????? ?????????????.
always
// ???????? 'always' ?????????? ??????????? ? ????? ????????? ???????????????.
	begin
      	//// ??????? ???? ? ???????? 10 ?????? ???????. 
		// ????????? ?????? clk HIGH(1) ?? 5 ??????, LOW(0) ?? 5 ?????? 
		clk=1; #5; 
		clk=0; #5;
	end

//// ?????? ?????. 
initial
// 'initial' ???????????? ?????? ? ????????? (??????????????? ????????????).
	begin
		//// ????????? ???????, ?????????? ??? ???? ? ??????? (? ???????? ???????) ? .tv-?????.
		$readmemb("fulladder.tv", testvectors);
		// $readmemb ?????? ???????? ??????, $readmemh ?????? ????????????????? ??????.

		// ???????????????? ?????????? ??????????? ???????? ? ?????????? ???????????? ??????.
		vectornum=0; 
		errors=0;
		// ??? ??????? ???????????????? ?????? ? ??????.

		//// ????? ???????? ?? 22 ??????? ??????? (2,2 ?????), ??????? ?????? reset ?????? ????? ?????? ?????????????.
		reset=1; #22;
     	reset=0;
		// ?????? ?????????? HIGH(1) ?? 22 ??????? ???????, ????? ???????? LOW(0) ?? ????? ?????.
	end

//// ?????????? ???????? ??????? ?? ???????????? ?????? ??????? clk.
always @(posedge clk)
	//  ???????? ????????, ??? ???? ???????? 'always' ????? ?????? ????????????????,
	// ??????? ????????????, ????? ??? ??????????? ? ????? ?????? ???????????. 
	// '@(posedge clk)' ???????? ?? ?????????????? ??? ???????????? ?????? ????????? c??????. 
	begin
		//// ?????????? ???????? ??????? ????? 1 ??????? ??????? ????? ???????????? ?????? ????????? ???????,
		// ????? ???????? ????????? ?????? ???????????? ? ???????? ????????.
		#1;
		//// ???????? ??????? 5-?????? ???????? ?????? ?? 3 ????? ? 2 ????????? ??????.
 		{a,b,cin, coutexpected,sexpected} = testvectors[vectornum];
	end

//// ???????? ??????????? ?? ?????????? ?????? ??????? clk.
always @(negedge clk)
// ??? ?????? ???? ????????? ????????? ????????? ????????? ???????????
// ? ????? ?? ?????????????? ?????? ????????? ???????.
	//// ?????? ?? ?????? ?? ????? ??????. ? ????????? ?????? ?????????? ?????????.
	if (~reset) begin
			//// ??????? ??????, ???????? ???? ?????? ?? ?? ????????? ? ??????????.
			if (s !== sexpected || cout !== coutexpected) begin
			// ???? ?????????? ??????, ??????? ??? 3 ?????, 2 ??????, 2 ????????? ??????.
				$display("Error: inputs = %b", {a, b, cin});
				// '$display' ??????? ????? ??????????? ?????? ??????? ? ???? ??????????.
				// %b, %d ? %h ????????? ???????? ? ????????, ?????????? ? ????????????????? ????????.
				// {a, b, cin} ??????? ??????, ?????????? ??? ???????.
				$display(" outputs = %b %b (%b %b expected)", s, cout, sexpected, coutexpected);
				//// ??????????? ?????????? errors.
				errors = errors + 1;
			end
			//// ??????????? ?????????? ????????.
			vectornum = vectornum + 1;
			//// ????? ?????? ????? ?????????? ?????? 'x', ??? ????????, ??? ??? ???????,
            // ??????? ???? ????????????? ?????????, ???? ??????????, ? ????? ??????? ???? ????????.
			if (testvectors[vectornum] === 5'bx) begin
			// '==='&'!==' ????? ?????????? ??????????? ? ????????? ???????? (X&Z),
			// ? ??????? ??. '=='&'!=', ??????? ????? ?????????? ?????? 0 ? 1.
			// 5'bx - 5-?????? ???????? ????? x ??? xxxxx.
			// ???? ??????? ???????? ?????? ????? xxxxx, ???????? ?????????? ???????? ? ???????????? ??????.
				$display("%d tests completed with %d errors", vectornum, errors);
				// ????? ?????????? ?????????.
			$stop;
		end
	end

// ?????????, ????? ????? ???????? ?? ?????????????? ?????? ????????? ???????
// ? ?????? ??????????? ?? ???????????? ????????? ??????? ?? ????????????? ???????? ???????. 
// ?? ??????? ?????????? ????????????. 
// ??????? ??????????? ?? ??? ???, ???? ? ???????? testvectors ?? ????????? ?????????? ???????? ????????. 
// ? ????? ????????????? ?????? ??????? ????? ?????????? ??????????? ???????? ???????? ? ????? ?????????? ???????????? ??????. 
endmodule